使用 npm管理组件版本

1.npm发布一个包
   1.1 官网注册帐号
   1.2 cmd下登录帐号:npm login
   1.3 发布：npm publish
2.创建自己的组件
    2.1 初始化项目
	2.2 修改package.json文件
	"private": false
	
	"main": "dist/vue-counter.min.js"
	
	2.3 修改 webpack.prod.config.js文件
	    2.3.1 修改out输出目录
		2.3.2 删除无用内容
	2.4 修改输出
	    2.4.1 修改main.js文件，输出自己的组件即可使用
	2.5 编辑.gitignore，允许/dist目录发布
	删除 /dist/
	
/build/webpack.prod.conf.js
'use strict'
const path = require('path')
const utils = require('./utils')
const webpack = require('webpack')
const config = require('../config')
const merge = require('webpack-merge')
const baseWebpackConfig = require('./webpack.base.conf')
const CopyWebpackPlugin = require('copy-webpack-plugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const ExtractTextPlugin = require('extract-text-webpack-plugin')
const OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')
const UglifyJsPlugin = require('uglifyjs-webpack-plugin')

const env = require('../config/prod.env')

const webpackConfig = merge(baseWebpackConfig, {
  module: {
    rules: utils.styleLoaders({
      sourceMap: config.build.productionSourceMap,
      extract: true,
      usePostCSS: true
    })
  },
  devtool: config.build.productionSourceMap ? config.build.devtool : false,
  // output: {
  //   path: config.build.assetsRoot,
  //   filename: utils.assetsPath('js/[name].[chunkhash].js'),
  //   chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')
  // },
  output: {
    path: config.build.assetsRoot,
    publicPath: config.build.assetsPublicPath,
    filename: 'VueMyjiajian.min.js',
    library:'MyJiajian',
    libraryTarget:'umd'
  },
  plugins: [
    // http://vuejs.github.io/vue-loader/en/workflow/production.html
    new webpack.DefinePlugin({
      'process.env': env
    }),
    new UglifyJsPlugin({
      uglifyOptions: {
        compress: {
          warnings: false
        }
      },
      sourceMap: config.build.productionSourceMap,
      parallel: true
    }),
    // extract css into its own file
    new ExtractTextPlugin({
      filename: utils.assetsPath('css/[name].[contenthash].css'),
      // Setting the following option to `false` will not extract CSS from codesplit chunks.
      // Their CSS will instead be inserted dynamically with style-loader when the codesplit chunk has been loaded by webpack.
      // It's currently set to `true` because we are seeing that sourcemaps are included in the codesplit bundle as well when it's `false`,
      // increasing file size: https://github.com/vuejs-templates/webpack/issues/1110
      allChunks: true,
    }),
    // Compress extracted CSS. We are using this plugin so that possible
    // duplicated CSS from different components can be deduped.
    new OptimizeCSSPlugin({
      cssProcessorOptions: config.build.productionSourceMap
        ? { safe: true, map: { inline: false } }
        : { safe: true }
    }),
  ]
})

module.exports = webpackConfig

/config/index.js
assetsSubDirectory: '/',

package.json
  "private": false,
  "main":"dist/VueMyjiajian.min.js",
  
注意package.json文件中
"version": "1.0.0",   每发布一个版本时，版本号要增加


main.js
import jiajian from './components/jiajian'
export default jiajian


3 其他项目中使用自己发布的组件
    3.1 先安装自己发布的组件
	npm install 组件名
	
	3.2 在需要使用该组件的组件中引入安装的组件
	其他使用方法跟其他公共的组件一样

	
	

